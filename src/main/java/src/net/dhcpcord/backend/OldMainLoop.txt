						cmdParsed = cmd.split(" ");
						intent = cmdParsed[0];
						System.out.println("Intent: " + intent);
						if(intent.equals("PING")) {
							output.println("Pong!");
							output.flush();
							continue;
						}
						else if(intent.equals("EVAL")) {
							ScriptEngine se = new ScriptEngineManager().getEngineByName("Nashorn");
							se.put("server", new DHCPBackend());
							try {
								output.println(se.eval(cmd.substring(5)));
							}
							catch(Exception e) {
								output.println(Errors.ERR_EVAL + " " + e);
							}
							output.flush();
							continue;
						}
						entity = cmdParsed[1];
						System.out.println("Entity: " + entity);
						guild = cmdParsed[2];
						System.out.println("Guild: " + guild);
						user = cmdParsed[3];
						System.out.println("User: " + user);
						if(intent.equals("GET")) {
							if(entity.equals("IP")) {
								output.println(getIp(guild, user));
							}
							else if(entity.equals("USER")) {
								try {
									output.println(getUser(guild, user)); //In this case, the "user" is actually an IP address instead of an ID
								}
								catch(Exception e) {
									e.printStackTrace();
									output.println(Errors.ERR_IP_UNREG + " " + e.getMessage());
								}
							}
							else if(entity.equals("SERVICE")) {
								output.println(Errors.ERR_IMPLEMENT + " Not Implemented");
							}
							else if(entity.equals("MASK")) {
								output.println(Errors.ERR_IMPLEMENT + " Not Implemented");
							}	
							else {
								output.println(Errors.ERR_SYNTAX + " Unknown entity: " + entity);
							}
						}
						else if(intent.equals("FLUSH")){
							if(entity.equals("IP")) {
								try {
									flush(guild);
									output.println("true");
								}
								catch(Exception e) {
									e.printStackTrace();
									output.println(Errors.ERR_FLUSH + " " + e);
								}
							}
							else if(entity.equals("SERVICE")) {
								output.println(Errors.ERR_IMPLEMENT + " Not Implemented");
							}
							else if(entity.equals("USER")) {
								output.println(Errors.ERR_IMPLEMENT + " 'FLUSH' operator not defined for entity 'USER'");
							}
							else if(entity.equals("MASK")) {
								output.println(Errors.ERR_IMPLEMENT + " 'FLUSH' operator not defined for entity 'MASK'");
							}
							else {
								output.println(Errors.ERR_SYNTAX + " Unknown entity: " + entity);
							}
						}
						else if(intent.equals("SET")) {
							if(entity.equals("IP")) {
								try {
									setIp(guild, user, cmdParsed[4], true);
									output.println("SUCCESS");
								}
								catch(Exception e) {
									e.printStackTrace();
									if(e instanceof ArrayIndexOutOfBoundsException) {
										output.println(Errors.ERR_ARGS + " Missing argument: ip. Syntax: SET IP guild user ip");
									}
									else {
										output.println(Errors.ERR_UNKNOWN + " " + e);
									}
								}
							}
							else if(entity.equals("SERVICE")) {
								output.println(Errors.ERR_IMPLEMENT + " Not Implemented");
							}
							else if(entity.equals("USER")) {
								output.println(Errors.ERR_IMPLEMENT + " 'SET' operator not defined for entity 'USER'");
							}
							else {
								output.println(Errors.ERR_SYNTAX + " Unknown entity: " + entity);
							}
						}
						else if(intent.equals("ASSIGN")) {
							if(entity.equals("IP")) {
								try {
									output.println(assignIp(guild, user));
								}
								catch(Exception e) {
									e.printStackTrace();
									output.println(Errors.ERR_UNKNOWN + " " + e);
								}
							}
							else if(entity.equals("SERVICE")) {
								output.println(Errors.ERR_IMPLEMENT + " 'ASSIGN' operator not defined for entity 'SERVICE'");
							}
							else if(entity.equals("USER")) {
								output.println(Errors.ERR_IMPLEMENT + " 'ASSIGN' operator not defined for entity 'USER'");
							}
							else if(entity.equals("MASK")) {
								output.println(Errors.ERR_IMPLEMENT + " 'ASSIGN' operator not defined for entity 'MASK'");
							}
							else {
								output.println(Errors.ERR_SYNTAX + " Unknown entity: " + entity);
							}
						}
						else if(intent.equals("ASSIGNBULK")) {
							if(entity.equals("IP")) {
								try {
									assignIPBulk(guild, user);
									output.println("true");
								}
								catch(Exception e) {
									e.printStackTrace();
									output.println(Errors.ERR_IP_ASSIGN + " " + e);
								}
							}
							else if(entity.equals("SERVICE")) {
								output.println(Errors.ERR_IMPLEMENT + " 'ASSIGNBULK' operator not defined for entity 'SERVICE'");
							}
							else if(entity.equals("USER")) {
								output.println(Errors.ERR_IMPLEMENT + " 'ASSIGNBULK' operator not defined for entity 'USER'");
							}
							else if(entity.equals("MASK")) {
								output.println(Errors.ERR_IMPLEMENT + " 'ASSIGNBULK' operator not defined for entity 'MASK'");
							}
							else {
								output.println(Errors.ERR_SYNTAX + " Unknown entity: " + entity);
							}
						}
						else if(intent.equals("RELEASE") || intent.equals("REMOVE")) {
							if(entity.equals("IP")) {
								try {
									release(guild, user);
									output.println("true");
								}
								catch(Exception e) {
									e.printStackTrace();
									output.println(Errors.ERR_UNKNOWN + " " + e);
								}
							}
							else if(entity.equals("SERVICE")) {
								output.println(Errors.ERR_IMPLEMENT + " Not Implemented");
							}
							else if(entity.equals("MASK")) {
								output.println(Errors.ERR_IMPLEMENT + " Not Implemented");
							}
							else {
								output.println(Errors.ERR_SYNTAX + " Unknown entity: " + entity);
							}
						}
						else {
							output.println(Errors.ERR_SYNTAX + " Unknown intent: " + entity);
						}